main.dart
import 'package:flutter/material.dart';
import 'book_detail.dart';
import 'book_list.dart';
import 'favorites_page.dart';
import 'profile_page.dart';
import 'cart_page.dart'; // Добавляем страницу корзины
import 'book_data.dart';

void main() {
  runApp(MyApp());
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'e-Book App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: HomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class _HomePageState extends State<HomePage> {
  int _selectedIndex = 0;
  final List<Product> _favoriteBooks = [];
  final Map<int, bool> _favoriteStatus = {};
  final Map<int, int> _cartBooks = {}; // Store product quantities in cart

  // Future variable for loading products
  late Future<List<Product>> _productsFuture;

  // Load products in initState
  @override
  void initState() {
    super.initState();
    _productsFuture = _loadProducts();
  }

  // Method to simulate loading products (Replace this with actual data source)
  Future<List<Product>> _loadProducts() async {
    // Simulating loading products (replace with actual data fetching logic)
    await Future.delayed(Duration(seconds: 2)); // Simulate a delay
    return [
      Product(id: 1, name: 'Book 1', description: 'Description 1', price: 10.0, image: 'image_url_1', reviews: []),
      Product(id: 2, name: 'Book 2', description: 'Description 2', price: 12.0, image: 'image_url_2', reviews: []),
      Product(id: 3, name: 'Book 3', description: 'Description 3', price: 15.0, image: 'image_url_3', reviews: []),
    ];
  }

  // Methods to manage cart and favorites
  void _increaseQuantity(Product product) {
    setState(() {
      _cartBooks[product.id] = (_cartBooks[product.id] ?? 0) + 1;
    });
  }

  void _decreaseQuantity(Product product) {
    setState(() {
      if (_cartBooks[product.id]! > 1) {
        _cartBooks[product.id] = _cartBooks[product.id]! - 1;
      } else {
        _cartBooks.remove(product.id);
      }
    });
  }

  void _toggleFavorite(Product product) {
    setState(() {
      final isFavorite = _favoriteStatus[product.id] ?? false;
      _favoriteStatus[product.id] = !isFavorite;

      if (!isFavorite) {
        _favoriteBooks.add(product);
      } else {
        _favoriteBooks.removeWhere((item) => item.id == product.id);
      }
    });
  }

  void _addToCart(Product product) {
    setState(() {
      _cartBooks[product.id] = (_cartBooks[product.id] ?? 0) + 1;
    });
  }

  void _removeFromCart(Product product) {
    setState(() {
      _cartBooks.remove(product.id);
    });
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    final List<Widget> _pages = [
      FutureBuilder<List<Product>>(
        future: _productsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text(snapshot.error.toString()));
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(child: Text('No products available.'));
          } else {

            return BookListPage(
              favoriteStatus: _favoriteStatus,
              onFavoriteToggle: _toggleFavorite,
              favoriteBooks: _favoriteBooks,
              cartBooks: _cartBooks,
              onAddToCart: _addToCart,
              onRemoveFromCart: _removeFromCart,
              onDecreaseQuantity: _decreaseQuantity,
              onIncreaseQuantity: _increaseQuantity,
            );
          }
        },
      ),
      FavoritesPage(
        favoriteBooks: _favoriteBooks,
        onFavoriteTapped: (product) {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => BookDetailPage(
                product: product,
                onProductDeleted: () {},
              ),
            ),
          );
        },
      ),
      FutureBuilder<List<Product>>(
        future: _productsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text(snapshot.error.toString()));
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(child: Text('No products available.'));
          } else {
            final products = snapshot.data!;

            return CartPage(
              cartBooks: _cartBooks,
              onRemoveFromCart: _removeFromCart,
              onIncreaseQuantity: _increaseQuantity,
              onDecreaseQuantity: _decreaseQuantity,
              allProducts: products, // Pass list of all products here
            );
          }
        },
      ),
      ProfilePage(),
    ];

    return Scaffold(
      body: _pages[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.book),
            label: 'Books',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.favorite),
            label: 'Favorites',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.shopping_cart),
            label: 'Cart',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Profile',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.blue,
        onTap: _onItemTapped,
        type: BottomNavigationBarType.fixed,
      ),
    );
  }
}

book_list.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'book_data.dart';
import 'book_detail.dart';
import 'book_add.dart';

class BookListPage extends StatefulWidget {
  final Map<int, bool> favoriteStatus;
  final List<Product> favoriteBooks;
  final void Function(Product) onFavoriteToggle;
  final Map<int, int> cartBooks; // Cart books list
  final void Function(Product) onAddToCart; // Add to cart method
  final void Function(Product) onRemoveFromCart; // Remove from cart method
  final void Function(Product) onIncreaseQuantity; // Increase quantity method
  final void Function(Product) onDecreaseQuantity; // Decrease quantity method

  const BookListPage({
    Key? key,
    required this.favoriteStatus,
    required this.favoriteBooks,
    required this.onFavoriteToggle,
    required this.cartBooks, // Receive the cartBooks list
    required this.onAddToCart, // Receive the add to cart method
    required this.onRemoveFromCart, // Receive the remove from cart method
    required this.onIncreaseQuantity, // Receive increase quantity method
    required this.onDecreaseQuantity, // Receive decrease quantity method
  }) : super(key: key);

  @override
  _BookListPageState createState() => _BookListPageState();
}

class _BookListPageState extends State<BookListPage> {
  late Future<List<Product>> _productsFuture;

  @override
  void initState() {
    super.initState();
    _productsFuture = ProductRepository.loadProducts();
  }

  void _refreshProductList() {
    setState(() {
      _productsFuture = ProductRepository.loadProducts();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('e-Book List'),
        backgroundColor: Colors.blue,
        titleTextStyle: const TextStyle(color: Colors.white, fontSize: 20),
      ),
      body: FutureBuilder<List<Product>>(
        future: _productsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text(snapshot.error.toString()));
          } else {
            final products = snapshot.data ?? [];
            return GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 10,
                mainAxisSpacing: 10,
                childAspectRatio: 0.7,
              ),
              itemCount: products.length,
              padding: const EdgeInsets.all(10),
              itemBuilder: (context, index) {
                final product = products[index];
                final isFavorite = widget.favoriteStatus[product.id] ?? false;
                // Извлекаем количество товара из cartBooks по ID
                final cartQuantity = widget.cartBooks[product.id] ?? 0;

                return GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => BookDetailPage(
                          product: product,
                          onProductDeleted: _refreshProductList,
                        ),
                      ),
                    );
                  },
                  child: Card(
                    elevation: 3,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Expanded(
                          child: ClipRRect(
                            borderRadius: const BorderRadius.vertical(top: Radius.circular(10)),
                            child: _buildProductImage(product.image),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                product.name,
                                style: const TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                              const SizedBox(height: 5),
                              Text(
                                '\$${product.price.toStringAsFixed(2)}',
                                style: const TextStyle(
                                  fontSize: 14,
                                  color: Colors.grey,
                                ),
                              ),
                            ],
                          ),
                        ),
                        Row(
                          children: [
                            IconButton(
                              icon: Icon(
                                isFavorite ? Icons.favorite : Icons.favorite_border,
                                color: isFavorite ? Colors.red : null,
                              ),
                              onPressed: () => widget.onFavoriteToggle(product),
                            ),
                            if (cartQuantity > 0)
                              Row(
                                children: [
                                  IconButton(
                                    icon: Icon(Icons.remove),
                                    onPressed: () => widget.onDecreaseQuantity(product),
                                  ),
                                  Text('$cartQuantity'),
                                  IconButton(
                                    icon: Icon(Icons.add),
                                    onPressed: () => widget.onIncreaseQuantity(product),
                                  ),
                                ],
                              )
                            else
                              IconButton(
                                icon: Icon(Icons.add_shopping_cart),
                                onPressed: () => widget.onAddToCart(product),
                              ),
                          ],
                        ),
                      ],
                    ),
                  ),
                );
              },
            );
          }
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => AddBookPage(
                onProductAdded: _refreshProductList,
              ),
            ),
          );
        },
        child: const Icon(Icons.add),
        backgroundColor: Colors.blue,
      ),
    );
  }

  Widget _buildProductImage(String imagePath) {
    final file = File(imagePath);
    if (file.existsSync()) {
      return Image.file(
        file,
        fit: BoxFit.cover,
      );
    } else {
      return Image.asset(
        imagePath,
        fit: BoxFit.cover,
      );
    }
  }
}

cart_page.dart:

import 'package:flutter/material.dart';
import 'package:pcs/book_data.dart';

class CartPage extends StatelessWidget {
  final Map<int, int> cartBooks;
  final Function(Product) onRemoveFromCart;
  final Function(Product) onIncreaseQuantity;
  final Function(Product) onDecreaseQuantity;
  final List<Product> allProducts; // Добавляем список всех продуктов

  CartPage({
    required this.cartBooks,
    required this.onRemoveFromCart,
    required this.onIncreaseQuantity,
    required this.onDecreaseQuantity,
    required this.allProducts, // Принимаем список продуктов
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Cart'),
      ),
      body: cartBooks.isEmpty
          ? Center(
              child: Text('Your cart is empty.'),
            )
          : ListView.builder(
              itemCount: cartBooks.length,
              itemBuilder: (context, index) {
                final productId = cartBooks.keys.elementAt(index);
                final quantity = cartBooks[productId]!;

                // Ищем продукт по его ID в списке всех продуктов
                final product = _findProductById(productId);

                return ListTile(
                  title: Text(product.name),
                  subtitle: Text("Price: \$${product.price.toStringAsFixed(2)}"),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.remove_circle),
                        onPressed: () => onDecreaseQuantity(product),
                      ),
                      Text('$quantity'),
                      IconButton(
                        icon: Icon(Icons.add_circle),
                        onPressed: () => onIncreaseQuantity(product),
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () => onRemoveFromCart(product),
                      ),
                    ],
                  ),
                );
              },
            ),
    );
  }

  // Метод для поиска продукта по ID в списке allProducts
  Product _findProductById(int productId) {
    return allProducts.firstWhere((product) => product.id == productId);
  }
}

Исправь код выше так, чтобы в списке товаров отображались корректные данные товаров из списка товаров